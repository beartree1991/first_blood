/*stm产品分类*/
*stm32小容量产品ld, 16 ~ 32KB, stm32f101xx, stm32f102xx, stm32f103xx
*stm32中容量产品md，64 ~ 128KB
*stm32大容量产品hd，256 ~ 512KB
*互联型产品, stm32f105xx, stm32f107xx

/*""和<>的区别*/
*系统自带的头文件用尖括号括起来，这样编译器会在系统文件目录下查找
*用户自定义的文件用双引号括起来，编译器首先会在用户目录下查找，然后在C++安装
 目录下查找，最后在系统文件中查找

/*BSP和CMSIS和HAL_Driver*/
*BSP为板级支持包，里面包含了STM32官方开发板的程序，用户如果用不到的话，可以不用或者自行开发。
该包提供的是直接与硬件打交道的API，如触摸屏，LCD，SRAM以及EEPROM等板载硬件资源驱动。该文件夹
中还有多种ST官方Discovery开发板，Nucleo开发板以及EVAL板的硬件驱动API文件，如果要编写相关的
硬件驱动，可以参考这些文件夹中的程序。
*CMSIS是ARM Cortex-M处理器的软件抽象层，在device文件夹中包含了STM32的启动文件以及链接文件。
该文件夹内包含的是符号CMSIS标志的软件抽象层组件的相关文件。主要包括DSP库(DSP_LIB文件夹)，
Cortex-M内核及其设备文件(Include文件夹)，微控制器专用头文件/启动代码/专用系统文件等(Device文件夹)。
*HAL_Driver为单片机驱动程序，能够驱动单片机的ADC、DAC、DMA、TIMER、USART、CAN等外设单元,LL为
对应的精简库。该文件夹包含了所有的STM32F1xx系列HAL库头文件和源文件，也就是所有底层硬件抽象层API声明
和定义。它的作用是屏蔽了复杂的硬件寄存器操作，统一了外设的接口函数。该文件夹包含Src和Inc两个子文件夹，
其中Src子文件夹存放的是.c源文件，Inc子文件夹存放的是与之对应的.h头文件。每个.c源文件对应一个.h头文件。
源文件名称基本遵循stm32f1xx_hal_ppp.c定义格式,头文件名称基本遵循stm32f1xx_hal_ppp.h定义格式。
*标准外设库（Standard Peripherals Library）是对STM32芯片的一个完整的封装，包括所有标准器件外设的
器件驱动器。这应该是目前使用最多的ST库。几乎全部使用C语言实现。但是，标准外设库也是针对某一系列芯片
而言的，没有可移植性。相对于HAL库，标准外设库仍然接近于寄存器操作，主要就是将一些基本的寄存器操作封
装成了C函数。开发者需要关注所使用的外设是在哪个总线之上，具体寄存器的配置等底层信息。

/*CMSIS和libOpenCM3和STM32Cube*/
*ARM Cortex微控制器软件接口标准（CMSIS）是Cortex-M处理器系列的独立于供应商的
 硬件抽象层，并指定调试器接口。CMSIS可以为处理器提供一致且简单的软件接口，以用
 于接口外设，实时操作系统和中间件。它简化了软件的重复使用，缩短了新的微控制器
 开发人员的学习时间，并缩短了产品的上市时间
*ibOpenCM3框架旨在为各种ARM Cortex-M0（+）/ M3 / M4微控制器（包括ST STM32，
 Ti Tiva和Stellaris，NXP LPC 11xx，13xx，15xx，17xx部件）创建免费/自由/开源
 固件库，Atmel SAM3，Energy Micro EFM32等
*STM32Cube嵌入式软件库，包括：HAL(hardware abstract layer)硬件抽象层，通过标准化的API调用实现不同STM32
设备之间的可移植性；低层（LL）API是一组轻量级，优化，面向专家的API，旨在提高性能
和运行时效率

/*#ifndef#define#endif用法*/
*頭件的中的#ifndef，這是一個很關鍵的東西。比如你有兩個C文件，這兩個C文件都include了
同一個頭文件。而編譯時，這兩個C文件要一同編譯成一個可運行文件，於是問題來了，大量的聲明衝突。
還是把頭文件的內容都放在#ifndef和#endif中吧。不管你的頭文件會不會被多個文件引用，你都要加上這個。
一般格式是這樣的：
#ifndef <標識>
#define <標識>

......
......

#endif
<標識>在理論上來說可以是自由命名的，但每個頭文件的這個「標識」都應該是唯一的。標識的命名規則一般
是頭文件名全大寫，前後加下劃線，並把文件名中的「.」也變成下劃線，如：stdio.h
#ifndef _STDIO_H_
#define _STDIO_H_

......

#endif

/*__weak关键字*/
*如果函数其它地方没有被定义，那么这个函数就是__weak定义的函数；如果函数在其他地方被定义了，就
使用新函数；这样就实现了重载。

/*volatile*/
*volatile是一个类型修饰符（type specifier）.volatile的作用是作为指令关键字，确保本条指令不
会因编译器的优化而省略，且要求每次直接读值。变量如果加了voletile修饰，则会从内存中重新装载内
容，而不是直接从寄存器中拷贝内容。

/*HAL_Delay()陷入死循环*/